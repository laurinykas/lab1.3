# -*- coding: utf-8 -*-
"""LLM 1.2.2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZSkfpphGeXOh6UZJrEqY3l78zBqm2c90
"""

# Import required libraries
import google.generativeai as genai  # For accessing Gemini AI
import matplotlib.pyplot as plt      # For data visualization
import numpy as np                   # Numerical operations (not directly used here)
from google.colab import userdata    # For secure API key access in Colab

# Configure Gemini AI with API key from Colab's secret storage
genai.configure(api_key=userdata.get('GOOGLE_API_KEY'))

def clean_response(response_text):
    """Sanitize AI response to extract numerical data.
    Removes all non-numeric characters except decimals and commas.
    This handles potential extra text/formatting from the AI response."""
    allowed_chars = {'.', ','}
    cleaned_text = ""
    for c in response_text:
        if c.isdigit() or c in allowed_chars:  # Keep only valid number characters
            cleaned_text += c
    return cleaned_text

def parse_numbers(cleaned_text):
    """Convert sanitized string to list of floats.
    Splits comma-separated values and handles empty strings."""
    numbers = []
    for num in cleaned_text.split(','):
        if num:  # Skip empty strings from potential double commas
            numbers.append(float(num))
    return numbers

# AI prompt configuration
prompt = """Generate 1000 random numbers uniformly distributed between 0 and 1. 
Return them as a single line of numbers separated by commas, without writing any code, give full 1000."""

# Initialize model and generate response
model = genai.GenerativeModel("gemini-2.0-flash")  # Use Flash model for fast response
response = model.generate_content(prompt)

# Data processing pipeline
cleaned_text = clean_response(response.text)       # Sanitize raw AI response
random_numbers = parse_numbers(cleaned_text)       # Convert to numerical list

# Quality control check
if len(random_numbers) < 1000:
    raise ValueError(f"API returned only {len(random_numbers)} numbers. Expected 1000.")
random_numbers = random_numbers[:1000]  # Ensure exactly 1000 numbers (truncate if over)

# Visualization using matplotlib
plt.hist(random_numbers, bins=100, edgecolor='black', alpha=0.8)
plt.title("Uniform Distribution of 1000 Random Numbers\n(Gemini AI Generated)")
plt.xlabel("Value")
plt.ylabel("Frequency")
plt.grid(True)
plt.show()  # Display the plot (implicit in Colab, explicit in other environments)
